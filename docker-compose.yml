
services:
  frontend-build:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - ./frontend/dist:/app/dist
    command: sh -c "npm ci --only=production --legacy-peer-deps && npx vite build"
    restart: "no"

  nginx:
    image: nginx:alpine
    container_name: nginx_app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-build
      - backend
    networks:
      - backnet
    restart: unless-stopped

  backend:
    build: .
    container_name: backend_app
    command: gunicorn -b 0.0.0.0:5000 'app:create_app()' --log-level debug
    volumes:
      - .:/app
    env_file:
      - .env
    expose:
      - "5000"
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis
    networks:
      - backnet
    restart: unless-stopped

  worker:
    build: .
    container_name: worker_app
    command: celery -A app.celery worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - backend
      - db
      - redis
    networks:
      - backnet
    restart: unless-stopped


  db:
    image: postgres:15
    container_name: db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backnet
    restart: always

  redis:
    image: redis:alpine
    command: ["redis-server", "--appendonly", "yes"]
    env_file:
      - .env
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backnet

volumes:
  postgres_data:
  redis_data:

networks:
  backnet:
    driver: bridge
